apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: quarkus-postgres
  title: Create a Quarkus/Postgres Application
  description: Quarkus starter with Panache and configuration for PostgreSQL and H2 databases.
  tags:
    - quarkus
    - postgres
    - h2
    - java
    - maven
spec:
  owner: developers
  type: service

  parameters:
    - title: Provide information for the Quarkus Application
      required:
        - componentId
        - name
        - description
        - groupId
        - owner
      properties:
        componentId:
          title: Project ID
          type: string
          description: Unique name of the Project. Lower case with no special characters.
          default: mydemoapp
          pattern: '^([a-z]*)*$'
          ui:help: Used as the component ID, Maven artifact ID, namespace base, and part of the java package path.
        name:
          title: Name
          type: string
          description: Full project name.
          default: My Demo App
          ui:help: Full project name. Used in documentation.
        description:
          title: Description
          type: string
          description: Project description. Used in documentation.
        groupId:
          title: Group ID
          type: string
          default: ca.pitt.demo.idp
          description: Maven Group ID eg (ca.pitt.demo).  Also used for package name.
        owner:
          title: Repo Owner
          type: string
          description: Your SCM host organization/group
          default: dev-team-a
          enum:
            - dev-team-a
            - dev-team-b
            - dev-team-c
      errorMessage:
        properties:
          componentId: Only lower case letters and numbers.  No special characters.

    - title: Configure the Git repository
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              ui:field: RepoUrlPicker
              ui:options:
                allowedOwners:
                  - redhat
                allowedHosts:
                  - gitea-scm.apps-crc.testing

  steps:
  - action: fetch:template
    id: fetchTemplateSource
    name: Fetch source template
    input:
      url: ./skeletons/source
      targetPath: ./source
      values:
        host: ${{ (parameters.repo.host | parseRepoUrl).host }}
        repo_owner: ${{ (parameters.repo.host | parseRepoUrl).owner }}
        repo_name: ${{(parameters.repo.host | parseRepoUrl).repo }}
        componentId: ${{ parameters.componentId }}
        groupId: ${{ parameters.groupId }}
        artifactId: ${{ parameters.componentId }}
        javaPackageName: '${{ parameters.groupId | replace("\.", "/") }}/${{ parameters.componentId }}'
        name: ${{ parameters.name }}
        owner: ${{ parameters.owner }}
        description: ${{ parameters.description }}
          
  - action: publish:gitea
    id: publishSource
    name: Publishing to a gitea source repository
    input:
      description: ${{ parameters.description }}
      repoUrl: ${{ parameters.repo.host }}
      defaultBranch: main
      repoVisibility: private
      sourcePath: ./source

  - action: fetch:template
    id: fetchTemplateGitops
    name: Fetch gitops template
    input:
      url: ./skeletons/gitops
      targetPath: ./gitops
      values:
        namespace: ${{ parameters.componentId }}
        host: ${{ (parameters.repo.host | parseRepoUrl).host }}
        repo_owner: ${{ (parameters.repo.host | parseRepoUrl).owner }}
        repo_name: ${{(parameters.repo.host | parseRepoUrl).repo }}-gitops
        componentId: ${{ parameters.componentId }}
        name: ${{ parameters.componentId }}
        owner: ${{ parameters.owner }}
        description: ${{ parameters.description }}
          
  - action: publish:gitea
    id: publishGitops
    name: Publishing to a gitea gitops repository
    input:
      description: ${{ parameters.description }}
      repoUrl: ${{ parameters.repo.host }}-gitops
      defaultBranch: main
      repoVisibility: private
      sourcePath: ./gitops

  - action: catalog:register
    id: register
    name: Register
    input:
      repoContentsUrl: ${{ steps.publishSource.output.repoContentsUrl }}
      catalogInfoPath: catalog-info.yaml

  - id: createArgocdResources
    name: Create the ArgoCD Resources
    action: argocd:create-resources
    input:
      appName: ${{ parameters.componentId }}
      # Hardcoded value because this is kept as a secret on the server to allow forks to easily change the value
      argoInstance: openshift-gitops
      namespace: '*'
      repoUrl: ${{ steps.publishGitops.output.remoteUrl }}
      labelValue: ${{(parameters.repo.host | parseRepoUrl).repo }}-gitops
      path: argocd

  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publishSource.output.remoteUrl }}
      - title: Open the GitOps Repository
        url: ${{ steps.publishGitops.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}