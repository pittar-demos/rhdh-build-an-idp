apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: quarkus-web-template
  title: Quarkus Hello world
  description: Create a simple microservice using Quarkus
  tags:
    - java
    - quarkus
spec:
  owner: quarkus
  type: service
  parameters:
    - title: Provide Information for Application
      required:
        - component_id
        - owner
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          default: my-quarkus-app
          ui:field: EntityNamePicker
        group_id:
          title: Group Id
          type: string
          default: io.quarkus
          description: Maven Group Id
        artifact_id:
          title: Artifact Id
          type: string
          default: quarkus-app
          description: Maven Artifact Id
        java_package_name:
          title: Java Package Name
          default: io.quarkus.demo
          type: string
          description: Name for the java package. eg (io.quarkus.blah)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: IdP owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Application git repository Information
      required:
        - orgName
        - repoName
        - owner
        - repoUrl
      properties:
        orgName:
          title: Organization Name
          type: string
        repoName:
          title: Repository Name
          type: string
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        owner:
          title: Owner
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User
        system:
          title: System
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - System
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - gitea-scm.apps-crc.testing

  steps:
    - id: template
      name: Generating component
      action: fetch:template
      input:
        url: ./skeleton
        # copyWithoutTemplating:
        #   - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          namespace: ${{ parameters.component_id }}-dev
          description: ${{ parameters.description }}
          group_id: ${{ parameters.group_id }}
          artifact_id: ${{ parameters.artifact_id }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          cluster: .apps-crc.testing
          destination: ${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}
          quay_destination: ${{ parameters.image_organization }}/${{ parameters.component_id }}
          port: 8080

    - id: publish
      name: Publishing to Source Code Repository
      action: publish:gitea
      input:
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        protectDefaultBranch: false
        repoVisibility: private

    - id: register
      name: Registering to the Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    # - id: template-gitops-deployment
    #   name: Generating Deployment Resources
    #   action: fetch:template
    #   input:
    #     url: ./manifests
    #     copyWithoutTemplating: []
    #     values:
    #       component_id: ${{ parameters.component_id }}
    #       description: ${{ parameters.description }}
    #       destination: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops
    #       source_repository: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}
    #       repository_name: ${{ (parameters.repoUrl | parseRepoUrl).repo }}
    #       git_owner: ${{ (parameters.repoUrl | parseRepoUrl).owner }}
    #       cluster: .apps.cluster-xxxxx.xxxxx.sandbox123.opentlc.com
    #       namespace: ${{ parameters.component_id }}-dev
    #       image_registry: ${{ parameters.image_registry }}
    #       image_host: ${{ parameters.image_host }}
    #       image_organization: ${{ parameters.image_organization }}
    #       image_name: ${{ parameters.component_id }}
    #       port: 8080
    #       deployment_name: quarkus-template
    #     targetPath: ./tenant-gitops

    # - id: publish-gitops
    #   name: Publishing to Resource Repository
    #   action: publish:github
    #   input:
    #     repoUrl: github.com?repo=${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops&owner=${{ (parameters.repoUrl | parseRepoUrl).owner }}
    #     title: gitops resources for ${{ parameters.component_id }}
    #     description: gitops resources for ${{ parameters.component_id }}
    #     sourcePath: ./tenant-gitops
    #     repoVisibility: public

    # - id: create-argocd-resources
    #   name: Create ArgoCD Resources
    #   action: argocd:create-resources
    #   input:
    #     appName: ${{ parameters.component_id }}-bootstrap
    #     argoInstance: main
    #     namespace: janus-argocd
    #     repoUrl: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops.git
    #     path: 'argocd/'

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}